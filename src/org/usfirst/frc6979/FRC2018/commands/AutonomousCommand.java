// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6979.FRC2018.commands;
import org.usfirst.frc6979.FRC2018.Robot;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import org.usfirst.frc6979.FRC2018.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

public class AutonomousCommand extends Command {
	private Timer autoTimer;
	public DriverStation DS;
	private final DifferentialDrive autoDrive = RobotMap.driveDifferentialDrive;
	int robotLocation;
	int positionLeft = 1;
	int positionRight = 3;
	int positionMiddle = 2;
	
    public AutonomousCommand() {
    	autoTimer.start();
    	
    	
    	//For Left Side
    	if(robotLocation == positionLeft) {
    		autoTimer.reset();
    		while(autoTimer.get() < 0) {
    			autoDrive.tankDrive(leftSpeed, rightSpeed);
    		}
    		autoDrive.tankDrive(0, 0);
    		
    	}
    	
    	
    	//For Middle Side
    	if(robotLocation == positionMiddle) {
    		autoTimer.reset();
    		while(autoTimer.get() < 0) {
    			autoDrive.tankDrive(leftSpeed, rightSpeed);
    		}
    		autoDrive.tankDrive(0, 0);
    	}
    	
    	
    	//For Right Side
    	if(robotLocation == positionRight) {
    		autoTimer.reset();
    		while(autoTimer.get() < 0) {
    			autoDrive.tankDrive(leftSpeed, rightSpeed);
    		}
    		autoDrive.tankDrive(0, 0);
    	}
    	
    	
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	robotLocation = DS.getLocation();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
